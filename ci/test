#!/usr/bin/env bash

# TODO: This script is need of a full cleanup.  Issue captured here:
#   https://github.com/cyberark/conjur/issues/1471

# TODO: Currently adding the -u and -o pipefail options breaks
# this script.  We should fix these errors and turn them on.
set -e

export REPORT_ROOT=/src/conjur-server
# Create default value if not set: allows compose to run in isolated namespace
: "${COMPOSE_PROJECT_NAME:="$(openssl rand -hex 3)"}"
export COMPOSE_PROJECT_NAME

### Subcommands
#
# All functions with names that start with a character in the set
# [a-z] will act as subcommands. Each of them:
#
#  * can be called from the commandline
#  * will be displayed by the help subcommand
#  * is expected to have a statement that starts ": DOC", which
#    defines the help text for the subcommand
#
# They're defined below in alphabetical order.
all() {
  : DOC - Run all tests

  local old_ifs="$IFS"
  IFS=$'\012'
  local cmds=( $(_subcommands) )
  IFS="$old_ifs"
  for c in ${cmds[*]}; do
    [[ $c = 'all' ]] && continue # no need to call recursively ;)
    $c
  done
}

cucumber_authenticators_config() {
  : DOC - Runs Cucumber Authenticator configuration features

  _run_cucumber_tests authenticators_config
}

cucumber_authenticators_status() {
  : DOC - Runs Cucumber Authenticator status features

  _run_cucumber_tests authenticators_status
}

cucumber_authenticators_ldap() {
  : DOC - Runs Cucumber LDAP Authenticator features

  _prepare_env_auth_ldap
  _run_cucumber_tests authenticators_ldap 'ldap-server'
}

cucumber_authenticators_azure() {
  : DOC - Runs Cucumber Azure Authenticator features

  ./authn-azure/check_dependencies.sh

  _run_cucumber_tests authenticators_azure "" "$(_get_azure_env_args)"
}

cucumber_authenticators_oidc() {
  : DOC - Runs Cucumber OIDC Authenticator features

  # We also run an ldap-server container for testing the OIDC & LDAP combined use-case.
  # Note: We can't run the above use-case in a separate Jenkins step because we'll have a port bind for keycloak
  _prepare_env_auth_ldap
  _prepare_env_auth_oidc
  _run_cucumber_tests authenticators_oidc 'ldap-server oidc-keycloak' "$(_get_oidc_env_args)"
}

cucumber_api() {
  : DOC - Runs Cucumber API features

  _run_cucumber_tests api
}

cucumber_policy() {
  : DOC - Runs Cucumber Policy features
  
  _run_cucumber_tests policy
}

cucumber_rotators() {
  : DOC - Runs Cucumber Rotator features
  
  _run_cucumber_tests rotators testdb
}

help() {
  : DOC - Show this message
  
  # _subcommands returns the list of commands, separated by a
  # newline. Set IFS to newline so each element in the cmds array will
  # be one command. _subcommands_doc returns the doc for each
  # command, separated by newlines, so IFS needs to be set for it,
  # too.
  IFS=$'\012'
  local cmds=( $(_subcommands) )
  local doc=( $(_subcommands_doc) )
  
  cat << EOF
NAME
    test - CLI to simplify testing

SYNOPSIS
    test <subcommand>

SUBCOMMANDS
EOF

  for i in $(seq 0 ${#cmds[@]}); do
    echo -e "    ${cmds[i]}\t${doc[i]}"
  done  | column -t -s $'\011'
}

rspec() {
  : DOC - Runs RSpec specs
  
  docker-compose up --no-deps -d pg

  _wait_for_pg pg

  docker-compose run -T --rm --no-deps cucumber -ec "
    bundle exec rake db:migrate
    rm -rf $REPORT_ROOT/spec/reports
    bundle exec env CI_REPORTS=$REPORT_ROOT/spec/reports rspec --format progress --require ci/reporter/rspec --format CI::Reporter::RSpecFormatter
  "
}

rspec_audit() {
  : DOC - Runs RSpecs for the Audit engine
  
  # Start Conjur with the audit database
  docker-compose up --no-deps -d audit pg

  _wait_for_pg audit

  AUDIT_DATABASE_URL=postgres://postgres@audit/postgres \
    docker-compose run -T --rm --no-deps  -w /src/conjur-server cucumber -ec "
      pwd
      ci/rspec-audit/migratedb
      
      rm -rf $REPORT_ROOT/spec/reports-audit
  
      # Run tests from audit engine directory
      pushd engines/conjur_audit
      BUNDLE_GEMFILE=/src/conjur-server/Gemfile \
      CI_REPORTS=$REPORT_ROOT/spec/reports-audit bundle exec rspec \
        --format progress --require ci/reporter/rspec --format CI::Reporter::RSpecFormatter
      popd
    "
}

### Internal functions
#
# Functions with names that start with a character other than [a-z]
# are for internal use. These functions are not displayed by the help
# subcommand.
#
# They're also defined alphabetically.
# Cleanup started containers, ok if they're already gone.


# Build the conjur image. Note the '(' instead of '{'. Defining the
# function this way means we'll run in a subshell. As a result, we
# won't change the caller's working directory or scribble on the
# environment.
_build_conjur() (
  local testdir="$1"; shift
  # Set release tag for building this version of Conjur
  cd "${testdir}/.."
  
  # Create Conjur Image
  ./build.sh --jenkins >&2
  # Grab the build tag so we launch the correct version of Conjur
  . version_utils.sh
  version_tag
)

# TODO: Possibly move this into bash-lib: will be useful elsewhere

# NOTE: See linked to issue at top of file.  This code in particular is can be
#   simplified, and we need to figure out if we want it to run by default.
docker_diagnostics() {
  local testSet="${1}"
  # Read the running containers names into an array.
  #
  # Note on bash trickiness: The backslash is required in \$NF because we want
  # $NF to be passed literally to awk -- so awk can interpret it -- whereas we
  # want the shell to interpret and expand ${COMPOSE_PROJECT_NAME}, so awk sees
  # its _value_ in the regex.
  #
  # Docker Note: container name is always the last field.  Hence $NF gets it.
  local cont_names
  readarray -t cont_names < <(docker ps --all | \
    awk "/${COMPOSE_PROJECT_NAME}/{print \$NF}")

  # Store container logs for archiving
  echo "Writing Container logs to container_logs/<testset>/container[-inspect].log"
  container_log_dir="$(git rev-parse --show-toplevel)/container_logs/${testSet}"
  mkdir -p "${container_log_dir}"
  for name in "${cont_names[@]}"; do
    docker inspect "$name" > "${container_log_dir}/${name}-inspect.log"
    docker logs "$name" > "${container_log_dir}/${name}.log"
  done
}

_finish() {
  local testSet="${1}"
  docker_diagnostics "${testSet}"
  # Give SimpleCov time to generate reports.
  sleep 15
  docker-compose down --rmi 'local' --volumes || true
}

_find_cucumber_network() {
  local net=$(docker inspect $(docker-compose ps -q conjur) --format '{{.HostConfig.NetworkMode}}')
  docker network inspect $net --format '{{range .IPAM.Config}}{{.Subnet}}{{end}}'
}

_get_oidc_env_args() {
  local oidc_env_args=''
  oidc_env_args="$(set -o pipefail; docker-compose exec -T oidc-keycloak printenv | grep KEYCLOAK | sed 's/.*/-e &/')"
  oidc_env_args="$oidc_env_args -e PROVIDER_URI=https://keycloak:8443/auth/realms/master"
  oidc_env_args="$oidc_env_args -e PROVIDER_INTERNAL_URI=http://keycloak:8080/auth/realms/master/protocol/openid-connect"
  oidc_env_args="$oidc_env_args -e ID_TOKEN_USER_PROPERTY=preferred_username"

  echo "${oidc_env_args}"
}

_get_azure_env_args() {
  local azure_env_args="-e AZURE_TENANT_ID=$AZURE_TENANT_ID"
  azure_env_args="$azure_env_args -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
  azure_env_args="$azure_env_args -e AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP"
  azure_env_args="$azure_env_args -e AZURE_AUTHN_INSTANCE_IP=$AZURE_AUTHN_INSTANCE_IP"
  azure_env_args="$azure_env_args -e AZURE_AUTHN_INSTANCE_USERNAME=$AZURE_AUTHN_INSTANCE_USERNAME"
  azure_env_args="$azure_env_args -e AZURE_AUTHN_INSTANCE_PASSWORD=$AZURE_AUTHN_INSTANCE_PASSWORD"
  azure_env_args="$azure_env_args -e USER_ASSIGNED_IDENTITY=$USER_ASSIGNED_IDENTITY"
  azure_env_args="$azure_env_args -e USER_ASSIGNED_IDENTITY_CLIENT_ID=$USER_ASSIGNED_IDENTITY_CLIENT_ID"
  azure_env_args="$azure_env_args -e SYSTEM_ASSIGNED_IDENTITY=$SYSTEM_ASSIGNED_IDENTITY"
  echo "${azure_env_args}"
}

_wait_for_keycloak() {
  for i in {1..20}
  do
   sleep=10
   echo "keycloak starting logs:"
   output=$(docker-compose logs oidc-keycloak | grep "started" | wc -l)
   if [ $output -ne 0 ]; then
        echo "Keycloak server is up and ready"
        return 0;
   else
        echo "Keycloak not ready yet sleep number $i for $sleep seconds"
        sleep $sleep
   fi
  done
  echo "Error with keycloak server start or it is too slow"
  return 1
}

_main() {
  local testdir="${1}"; shift
  local testSet="${1}"

  # If there are no arguments, show help
  if [[ "${#@}" -eq 0 || "$1" == 'help' ]]; then
    help
    exit 1
  fi
  # shellcheck disable=SC2064
  [[ -z "$KEEP_CONTAINERS" ]] && trap "_finish ${testSet}" EXIT

  export TAG=$(_build_conjur "$testdir")
  cd "${testdir}"
  "$@"
}

_prepare_env_auth_ldap() {
  LDAP_CHECK_COMMAND='ldapsearch -x -ZZ -H ldapi:/// -b dc=conjur,dc=net -D "cn=admin,dc=conjur,dc=net" -w ldapsecret'
  docker-compose up --no-deps -d ldap-server

  # LDAP is a bit slow to start up
  echo "Ensuring that LDAP is up..."
  for i in {1..45}; do
    (docker-compose exec -T ldap-server bash -c "${LDAP_CHECK_COMMAND}" | grep '^search: 3$') >/dev/null 2>&1 && break
    echo -n '.'
    sleep 2
  done
  # Make sure it's really up
  (docker-compose exec -T ldap-server bash -c "${LDAP_CHECK_COMMAND}" | grep '^search: 3$') || (echo 'LDAP server failed to start in time'; exit 1)
}

_prepare_env_auth_oidc() {
  docker-compose up --no-deps -d pg conjur oidc-keycloak

  # Check if keycloak is up
  _wait_for_keycloak

  # Define oidc-keycloak client
  echo "Defining oidc-keycloak client"
  docker-compose exec -T oidc-keycloak /scripts/create_client

  echo "Creating user 'alice' in Keycloak"
  docker-compose exec -T oidc-keycloak bash -c '/scripts/create_user "$KEYCLOAK_APP_USER" "$KEYCLOAK_APP_USER_PASSWORD" "$KEYCLOAK_APP_USER_EMAIL"'

  echo "Creating second user 'bob' in Keycloak"
  docker-compose exec -T oidc-keycloak bash -c '/scripts/create_user "$KEYCLOAK_SECOND_APP_USER" "$KEYCLOAK_SECOND_APP_USER_PASSWORD" "$KEYCLOAK_SECOND_APP_USER_EMAIL"'

  echo "Creating user in Keycloak that will not exist in conjur"
  docker-compose exec -T oidc-keycloak bash -c '/scripts/create_user "$KEYCLOAK_NON_CONJUR_APP_USER" "$KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD" "$KEYCLOAK_NON_CONJUR_APP_USER_EMAIL"'

  echo "Initialize keycloak certificate in conjur server"
  docker-compose exec -T conjur /authn-oidc/keycloak/scripts/fetchCertificate
}

# Setup and run Cucumber tests, first starting any other services required
# args: <profile name> <extra services>
# example: run_cucumber_tests 'policy'
_setup_for_cucumber() {
  if [[ ! -z "$1" ]]; then
    local services="$1"; shift
  fi
  
  # Create reports folders
  mkdir -p cucumber/$profile/features/reports
  rm -rf cucumber/$profile/features/reports/*

  # Make sure all the services are up
  docker-compose up --no-deps --no-recreate -d pg conjur $services

  docker-compose exec -T conjur conjurctl wait
  docker-compose exec -T conjur conjurctl account create cucumber
}

_get_api_key() {
  docker-compose exec -T conjur conjurctl \
    role retrieve-key cucumber:user:admin | tr -d '\r'
}

# run cucumber, using $1 to initialize the environment. $1 can be
# empty, but it must be present.
_run_cucumber() {
  local cucumber_env_args="$1"; shift
  # If there's no tty (e.g. we're running as a Jenkins job, pass -T to
  # docker-compose)
  local notty=$(tty -s || echo '-T' && true)

  docker-compose run --no-deps $notty --rm $cucumber_env_args \
     -e CONJUR_AUTHN_API_KEY=$api_key \
     -e CUCUMBER_NETWORK=$(_find_cucumber_network) \
     cucumber -ec "$@"
}

_run_cucumber_tests() {
  local profile="$1"
  if [[ ! -z "$2" ]]; then
    local services="$2"
  fi
  if [[ ! -z "$3" ]]; then
    local cucumber_env_args="$3"
  fi

  _setup_for_cucumber "$services"
  
  # Grab the admin user API key
  local api_key=$(_get_api_key)

  # Run the tests
  _run_cucumber "$cucumber_env_args" \
     "bundle exec cucumber --strict -p $profile --format json --out cucumber/$profile/cucumber_results.json --format junit --out cucumber/$profile/features/reports"

  # Simplecov writes its report using an at_exit ruby hook. If the container
  # is killed before ruby, the report doesn't get written. So here we
  # kill the process to write the report. The container is kept alive
  # using an infinite sleep in the at_exit hook (see .simplecov).
  docker-compose exec -T conjur bash -c "pkill -f 'puma 3'"
}

_run_cucumber_shell() {
  if [[ ! -z "$1" ]]; then
    local services="$1"; shift
  fi
  
  _setup_for_cucumber "$services"
  local api_key=$(_get_api_key)

  _run_cucumber '' /bin/bash
}


_start_conjur() {
  if [[ ! -z "$1" ]]; then
    local services="$1"; shift
  fi
  
  # Start Conjur and supporting services
  typeset -p COMPOSE_PROJECT_NAME
  docker-compose up --no-deps --no-recreate -d pg conjur $services
}

_subcommands() {
  typeset -f | awk '/^[a-z]/ {print $1}'
}

_subcommands_doc() {
  typeset -f | awk '/^    : DOC/ {sub(/    : DOC/, "", $0); print $0}' | tr -d ';'
}

_wait_for_pg() {
  local svc="$1"; shift

  until docker-compose exec -T $svc psql -U postgres -c "select 1" -d postgres; do sleep 1; done
}

_main "$(dirname $0)" "$@"
